/* -----------------------------------------------

Andy.SCSS: Open-Source Collection of Useful SASS Mixins Library.

URL: http://gillesbertaux.com/andy

By: Gilles Bertaux | http://gillesbertaux.com | @gillesbertaux

The purpose of Andy is to gather useful mixins and avoid endless research or heavy framework use. Feel free to fork it on Github and add your own mixins: https://github.com/gillesbertaux/andy

Mixins available:
  - Background Gradient
  - Background Size
  - Border Corners
  - Box Sizing
  - Center Block
  - Centering Block: Horizontal, Vertical, Both
  - Clearfix
  - Div Outline
  - Font Face
  - Hardware Acceleration
  - Image Retina
  - Line-Height
  - Media Queries
  - Opacity
  - Opacity Black
  - Opacity White
  - Position
  - Radius
  - Scale
  - Shadows
  - Size
  - Text Shadow
  - Translate-x
  - Translate-y
  - Transition
  - Transitions Snippets

 ----------------------------------------------- */

/* ANDY SETTINGS */

$base-font-size: 16px !default;


@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }

  #{$property}: $value;
}

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}


/* BACKGROUND GRADIENTS */

// usage example: @include background-gradient(red, black, vertical)

@mixin background-gradient($startcolor, $endcolor, $orientation) {
    background: $startcolor;

    @if $orientation == 'vertical' {
      background: -webkit-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: linear-gradient(to bottom,  $startcolor 0%,$endcolor 100%);
    } @else if $orientation == 'horizontal' {
      background: -webkit-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: linear-gradient(to right,  $startcolor 0%,$endcolor 100%);
    } @else {
      background: -webkit-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: radial-gradient(ellipse at center,  $startcolor 0%,$endcolor 100%);
    }
}

/* BACKGROUND SIZE */

// usage example: @include background-size(100%, 100%);

@mixin background-size($width, $height) {
    @include prefix(background-size, $width $height, 'webkit' 'moz');
}

/* BORDER CORNERS */

// usage example: @include border(100%, 100%, 0, 0);

@mixin border-radius-separate($topLeftRadius, $topRightRadius, $bottomLeftRadius, $bottomRightRadius) {
    @include prefix(border-top-left-radius, $topLeftRadius, 'webkit' 'moz');
    @include prefix(border-top-right-radius, $topRightRadius, 'webkit' 'moz');
    @include prefix(border-bottom-right-radius, $bottomRightRadius, 'webkit' 'moz');
    @include prefix(border-bottom-left-radius, $bottomLeftRadius, 'webkit' 'moz');
}

/* BOX SIZING */

// usage example: @include box-sizing(border-box);

@mixin box-sizing($type) {
    @include prefix(box-sizing, $type, 'moz');
}

/* CENTER BLOCK */

@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

/* CENTERING BLOCKS ELEMENTS, HORIZONTAL, VERTICAL, BOTH */

// Important: you must have a parent element with position: relative.

@mixin center-both {
    position: absolute;
    top: 50%;
    left: 50%;
    @include prefix(transform, translate(-50%, -50%), 'webkit' 'ms');
}

// if height is defined.
@mixin center-h($height) {
    position: absolute;
    top: 50%;
    height: $height;
    margin-top: -($height / 2);
}

// if height is unknown.
@mixin center-h--unk {
    position: relative;
    top: 50%;
    @include prefix(transform, translateY(-50%), 'webkit' 'ms');
}

/* CLEARFIX */

%clearfix {
    *zoom: 1;

    &:before, &:after {
        content: ' ';
        display: table;
    }

    &:after {
        clear: both;
    }
}

/* DIV OUTLINE */

@mixin outline {
    box-shadow: rgba(255, 255, 255, 0.5) 0 1px 0, inset rgba(0, 0, 0, 0.75) 0 1px 0;
}

/* FONT FACES */

// usage example: @include font-face(gotham,/fonts/gotham.eot,/fonts/gotham.woff,/fonts/gotham.ttf,/fonts/gotham.svg, 300, normal);

@mixin font-face($fontFamily, $eotFileSrc, $woffFileSrc, $ttfFileSrc, $svgFileSrc, $weight, $style) {
    font-family: $fontFamily;
    src: url($eotFileSrc)  format('eot'),
         url($woffFileSrc) format('woff'),
         url($ttfFileSrc)  format('truetype'),
         url($svgFileSrc)  format('svg');
    font-weight: $weight;
    font-style: $style;
}

/* FONT SIZE */

// usage example: @include fontsize(16px);
//            or: @include fontsize(16);

@mixin font-size($size) {
  @if (unitless($size)){
    $size: $size * 1px;
  }

  font-size: $size;
  font-size: ($size / $base-font-size) * 1rem;
}

/* HARDWARE ACCELERATION */

@mixin ha {
    @include prefix(transform, translate3d(0, 0, 0), 'webkit' 'ms');
}

/* IMAGE RETINA */

// usage example: @include image-2x(/img/image.png, 100%, auto);

@mixin image-2x($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
           (-o-min-device-pixel-ratio: 2.6/2),
           (-webkit-min-device-pixel-ratio: 1.3),
           (min-device-pixel-ratio: 1.3),
           (min-resolution: 1.3dppx) {
        /* on retina, use image that's scaled by 2 */
        background-image: url($image);
        background-size: $width $height;
    }
}

/* LINE HEIGHT */

// usage example: @include line-height(16);

@mixin line-height($heightValue: 12){
    line-height: $heightValue * 1px; //fallback for old browsers
    line-height: (1 / ($base-font-size / ($base-font-size * 0 + 1)) * $heightValue * 1rem);
}

/* MEDIA QUERIES */

// usage example: @include mquery(350px, 2) { width: 100%; }

@mixin mquery($width, $ratio: false) {
    @if $ratio {
        @media
            only screen and (max-width: $width) and  (min--moz-device-pixel-ratio: $ratio),
            only screen and (max-width: $width) and  (-webkit-min-device-pixel-ratio: $ratio),
            only screen and (max-width: $width) and  (min-device-pixel-ratio: $ratio) {
            @content;
        }
    } @else {
        @media only screen and (max-width: $width) {
            @content;
        }
    }
}

@mixin mquery-r($ratio) {
    @media
        only screen and (-webkit-min-device-pixel-ratio: $ratio),
        only screen and (min--moz-device-pixel-ratio: $ratio),
        only screen and (-o-min-device-pixel-ratio: $ratio),
        only screen and (min-device-pixel-ratio: $ratio) {
        @content;
    }
}

/* OPACITY */

@mixin opacity($opacity) {
    opacity: $opacity;
    filter: alpha(opacity=($opacity * 100));
}

/* BLACK / WHITE OPACITY */

// usage example: div { border: 1px solid black(.2); }

@function black($opacity) {
    @return rgba(0, 0, 0, $opacity);
}

@function white($opacity) {
    @return rgba(255, 255, 255, $opacity);
}

/* POSITION */

// usage example: @include position(absolute, 10px, null, 10px, 10px);

@mixin position($type, $left, $right, $top, $bottom) {
    position: $type;
    left: $left;
    right: $right;
    top: $top;
    bottom: $bottom;
}

/* SCALE */

// usage example: @include scale(2);

@mixin scale($value) {
    @include prefix(transform, scale($value), 'webkit' 'ms');
}

/* SIZE */

// usage example: @include size(350px, 350px);

@mixin size($width, $height) {
    width: $width;
    height: $height;
}

/* TEXT SHADOW */

@mixin text-shadow($value) {
    text-shadow: rgba(255, 255, 255, $value) 0 1px 0;
}

/* TRANSLATE X */

@mixin translate-x($value) {
    @include prefix(transform, translateX($value), 'webkit' 'ms');
}

/* TRANSLATE Y */

@mixin translate-y($value) {
    @include prefix(transform, translateY($value), 'webkit' 'ms');
}

/* TRANSITION */

// usage example: @include hover(.3s);
//       or @include hover(.3s, ease-in);

@mixin transition($time, $timing-function: ease-in-out) {
    @include prefix(transition, all $time $timing-function, 'webkit');
}

/* TRANSITION SCALE-DOWN */

@include keyframes('scale-down') {
    0% { @include scale(1); }
    50% { @include scale(.95); };
    100% { @include scale(1); };
}

@mixin scale-down($time: 1s) {
    @include prefix(animation, scale-down $time ease-out 1, 'webkit');
}

/* TRANSITION SCALE UP HOVER */

@include keyframes('scale-up') {
    0% { @include scale(1); }
    50% { @include scale(1.1); };
    100% { @include scale(1); };
}

@mixin scale-up($time: 1s) {
    @include prefix(animation, scale-up $time ease-in-out 1, 'webkit');
}

/* TRANSITION FADE-IN */

@include keyframes('fade-in') {
    0% { opacity: 0; }
    to { opacity: 1; };
}

@mixin fade-in($time: 1s) {
    @include prefix(animation, fade-in $time ease-out 1, 'webkit');
}

/* TRANSITION SLIDE-IN-DOWN */

@include keyframes('slide-in-down') {
    0% { @include translate-y(-100px); opacity: 0; }
    75% { @include translate-y(0); }
    100% { opacity: 1; }
}

@mixin slide-in-down($time) {
    @include prefix(animation, slide-in-down $time ease-in-out, 'webkit');
}

/* TRANSITION SLIDE-IN-UP */

@include keyframes('slide-in-up') {
    0% { @include translate-y(100px); opacity: 0; }
    75% { @include translate-y(0); }
    100% { opacity: 1; }
}

@mixin slide-in-up($time) {
    @include prefix(animation, slide-in-up $time ease-in-out, 'webkit');
}

/* TRANSITION SLIDE-IN-RIGHT */

@include keyframes('slide-in-right') {
    0% { @include translate-x(100px); opacity: 0; }
    75% { @include translate-x(0); }
    100% { opacity: 1; }
}

@mixin slide-in-right($time) {
    @include prefix(animation, slide-in-right $time ease-out backwards, 'webkit');
}

/* TRANSITION SLIDEINLEFT */

@include keyframes('slide-in-left') {
    0% { @include translate-x(-100px); opacity: 0; }
    75% { @include translate-x(0); }
    100% { opacity: 1; }
}

@mixin slide-in-left($time) {
    @include prefix(animation, slide-in-left $time ease-out backwards, 'webkit');
}
